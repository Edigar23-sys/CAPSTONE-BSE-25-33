name: CI Pipeline

on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_DATABASE: manager
          MYSQL_ROOT_PASSWORD: mU35g!sha
        ports:
          - 3306:3306
        options: '--health-cmd="mysqladmin ping --silent" --health-interval=10s --health-timeout=5s --health-retries=3'

    steps:
      # Step to checkout the code from GitHub
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Node.js for building the frontend assets
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Install Node.js dependencies (for the frontend)
      - name: Install Node.js dependencies
        run: npm install

      # Step to install PHP and Composer
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, pdo, mysql

      # Install Composer dependencies for Laravel backend
      - name: Install Composer
        run: sudo apt-get update && sudo apt-get install composer -y

      - name: Install PHP dependencies
        run: composer install --prefer-dist --no-ansi --no-interaction --no-progress --verbose

      # Clear cache
      - name: Clear Laravel cache
        run: php artisan config:cache


      - name: Set environment variables
        run: |
          echo "APP_ENV=testing" >> .env
          echo "APP_KEY=base64:jusFRrgOz5ZJUGO0izVwAerocCipnebEu5De/R9wbNM=" >> .env
          echo "DB_CONNECTION=pgsql" >> .env
          echo "DB_HOST=dpg-cshkqb68ii6s73bgn6fg-a" >> .env  # Render host
          echo "DB_PORT=5432" >> .env
          echo "DB_DATABASE=timesheetsdb_4rk3" >> .env
          echo "DB_USERNAME=timesheetsdb_4rk3_user" >> .env
          echo "DB_PASSWORD=9GJkIGSBa4FMyUXPR7LOW3CLL9qKKBLa" >> .env
      

      # Ensure MySQL is installed and running
      - name: Ensure MySQL is installed and running
        run: sudo systemctl start mysql
        
      - name: Generate application key
        run: php artisan key:generate

      # Build the project (frontend assets)
      - name: Build the project
        run: npm run build

      - name: Run migrations
        run: php artisan migrate --force

      # Run Laravel tests
      - name: Run PHP/Laravel tests
        run: php artisan test

      # Lint the frontend code
      - name: Lint code
        run: npm run lint


  # Deploy to Render
  deploy-to-staging:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

             
      - name: Deploy to Render staging
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          curl -X POST \
          -H "Authorization: Bearer $RENDER_API_KEY" \
          -H "Content-Type: application/json" \
          -d '{}' \
          https://api.render.com/v1/services/srv-csaldirqf0us73a00040/deploys


  deploy-to-production:
    runs-on: ubuntu-latest
    environment: production
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

             
      - name: Deploy to Render Production
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          curl -X POST \
          -H "Authorization: Bearer $RENDER_API_KEY" \
          -H "Content-Type: application/json" \
          -d '{}' \
          https://api.render.com/v1/services/srv-csaldirqf0us73a00040/deploys

  # Rollback Mechanism
  rollback:
    runs-on: ubuntu-latest
    needs: deploy-to-production  # Ensure this step runs after the deploy step

    steps:
      - name: Check if deployment failed
        run: |
      - name: Rollback on Failure
        if: failure()
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          echo "Triggering rollback..."
          curl -X POST \
          -H "Authorization: Bearer $RENDER_API_KEY" \
          -H "Content-Type: application/json" \
          -d '{"rollback_to": "previous"}' \
          https://api.render.com/v1/services/srv-csaldirqf0us73a00040/deploys

  # Monitoring Setup (Prometheus and Grafana)
  monitoring:
        name: Set up Monitoring (Prometheus and Grafana)
        runs-on: ubuntu-latest
        needs: deploy-to-production  # Ensure this step runs after the build step

        steps:
          - name: Configure Prometheus
            run: |
              # Commands to configure Prometheus on your Render instance
              echo "Setting up Prometheus for monitoring"

          - name: Configure Grafana
            run: |
              # Commands to configure Grafana on your Render instance
              echo "Setting up Grafana for monitoring"
         
